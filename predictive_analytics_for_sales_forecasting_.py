# -*- coding: utf-8 -*-
"""Predictive Analytics for Sales Forecasting .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mpW9vD6yhDy3kXCsFnUqGDfvPloF8XDt
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from scipy import stats
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

df = pd.read_csv('/content/store_data.csv')

print("ðŸ”¹ First 10 rows:")
print(df.head(10))

print("\nðŸ”¹ Dataset Info:")
print(df.info())

print("\nðŸ”¹ Summary:")
print(df.describe())

df.apply(lambda x : len(x.unique()))  #unique value counts from all the columns

df.duplicated().sum() #Checking whether it is duplicated or not

df.info() #Data types and Non-null count of all the columns

cat_col = []
for x in df.dtypes.index:
    if df.dtypes[x] == 'object':
        cat_col.append(x)
display(cat_col)

#Data Cleaning
#Printing the column with have "object" datatype

cat_col.remove('Customer_ID')
cat_col.remove('Product_ID')
#Removing the columns from the list  since the both columns doesn't need any cleaning

display(cat_col)

for col in cat_col:
    print(col)
    print(df[col].value_counts(),'\n')
    print('-'*55)
#Checking  the value counts of the columns from the list

print(df.isnull().sum())

plt.figure(figsize=(12,6))
df.groupby('Order_Date')['Sales'].sum().plot()
plt.title('Weekly Sales Over Time')
plt.xlabel('Order_Date')
plt.ylabel('Sales')
plt.grid()
plt.show()

if 'Store' in df.columns:
    df = pd.get_dummies(df, columns=['Store'], drop_first=True)

if 'Promotion' in df.columns:
    df = pd.get_dummies(df, columns=['Promotion'], drop_first=True)

df['Order_Date'] = pd.to_datetime(df['Order_Date'], errors='coerce')

# Drop rows where conversion failed (if any)
df.dropna(subset=['Order_Date'], inplace=True)

# Create time-based features
df['Month'] = df['Order_Date'].dt.month
df['Year'] = df['Order_Date'].dt.year
df['Day_of_Week'] = df['Order_Date'].dt.dayofweek
df['Week'] = df['Order_Date'].dt.isocalendar().week

X = df.drop(['Sales', 'Order_Date', 'Order_ID', 'Row_ID'], axis=1, errors='ignore')
y = df['Sales']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

print("X_train shape:", X_train.shape)
print("X_test shape:", X_test.shape)
print("y_train shape:", y_train.shape)
print("y_test shape:", y_test.shape)

X_test['date'] = pd.to_datetime(X_test['date'])
X_test['year'] = X_test['date'].dt.year
X_test['month'] = X_test['date'].dt.month
X_test['day'] = X_test['date'].dt.day
X_test = X_test.drop('date', axis=1)

# Convert to datetime
X_train['date'] = pd.to_datetime(X_train['date'])
X_test['date'] = pd.to_datetime(X_test['date'])

# Extract date components
for df in [X_train, X_test]:
    df['year'] = df['date'].dt.year
    df['month'] = df['date'].dt.month
    df['day'] = df['date'].dt.day
    df.drop('date', axis=1, inplace=True)

model = LinearRegression()
model.fit(X_train, y_train)

# Predict on test set
y_pred = model.predict(X_test)

# Evaluate model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f"MAE: {mae:.2f}")
print(f"RMSE: {rmse:.2f}")
print(f"RÂ²: {r2:.2f}")

print(X.dtypes)